function [D,W,error] = distance(X)
% This function takes a set of parameters and returns the distance between
% the moments in the data and the moments generated by the parameter set.

rng(80085,'twister');
seed_crand(80085);

format long;

%  X =[...
%       1.99035   1.94277   0.21428  14.37174   4.27971  22.24597  -3.96849   8.30548   1.03701   3.35287;...
%       -5.86761  -5.25532   0.24327   1.43162   1.88984  16.45042   0.40897  11.93005   1.41226  -1.18815;...
%       -5.80063  -5.13575   0.23152   1.46217   1.87921  16.05394   0.38654  11.94567   1.38565  -1.29631...
%        ];

% X = [-5.80063  -5.13575   0.23152   1.46217   1.88984  17.05394   1.38654  10.50482   1.38565  -1.29631  11.94567  -5.13575];  
% X = [-5.79756  -4.13020   0.23193   1.46214   1.88120  16.05066   0.38239  10.72108   1.38618  -1.29631  11.94630  -5.13566];
% X = [-5.68500  -3.00817   0.23399   2.66017   4.26429  16.08310   0.38296  10.59761   1.38566  -0.64099  11.95050  -5.19276];
% X = [-5.79756  -4.13020   0.23193   1.46214   1.88120  16.05066   0.38239  10.72108   1.38618  -1.29631  11.94630  -5.13566]; % 11.43868, 0.2695
% X  = [-5.79756  -4.13020   0.23193   1.46214   1.88120  16.05066   0.38239  10.72108   1.38618  -1.29631  11.94630  -5.13566]; 
% X =  [-5.79756  -4.13020   0.23193   1.46214   1.88120  16.05066   0.38239  10.72108   1.38618  -1.29631  11.94630  -5.13566];
% X = [-4.66050  -4.94109   0.24519   3.67311   1.94383  16.08687  0.24641  11.01453   1.43176  -1.27148  12.96216  -6.21100];
% X = [-5.72446  -4.12239   0.23266   2.70436   2.16730  16.30953 0.42438  11.02430   1.39542  -1.29631  12.98462  -6.20709];

% learning David's best fit: 
% X = [-5.72446  -4.12239   0.23266   2.70436   2.16730  16.30953   0.42438  11.02430   1.39542  -1.29631  12.98462  -6.20709]; % 11.385357568312385, 0.447555765337918
% X = [-3.30077  -3.75520   0.23144   3.75072   2.19370  15.42601   0.41289  10.94623   1.38565  -1.26506  13.00126  -6.13549]; % 11.300854
% X = [-3.60779  -3.26585   0.23156   2.46391   1.88138  15.42653   0.38246  10.72157   1.38618  -1.26440  13.00236  -6.13506];
%  X = [-3.60712  -3.75520   0.23156   2.46463   1.88153  15.42634   0.38246  11.72211   1.38618  -1.21819  13.00238  -6.13506];
% X = [-3.60529  -3.87941   0.23156   2.46487   1.88153  15.42634  0.38246  11.72211   1.38618  -1.21819  13.00238  -6.13506];  
X = [-3.60529  -3.87941  0.23156  2.46487  1.88176  15.42634 0.38246  11.72211  1.38618  -1.21819  13.00238  -6.13506];

% relation between parameters and the X vector:

% F_h      =  exp(X(1));     % home match fixed cost
% scale_h  =  X(2);          % log of home profit function scalar       
% delta    =  0.326;         % exogenous match death hazard (per year) set in X2params.m                                 
% beta     =  1;             % cost function convexity parameter               
% ah       =  X(4)*X(3);     % X(3) is mean of beta dist ah / (ah + bh)
% bh       =  X(4)*(1-X(3)); % X(4) is (ah + bh)        
% L_z      =  4;             % buyer shock jump hazard (once per quarter)           
% D_z      =  X(5);          % buyer shock jump size            
% L_b      =  X(6);          % shipment hazard            
% gam      =  X(7);          % network effect
% cs_h     =  exp(X(8));     % cost function scalar, home market  
% sig_p    =  X(9);          % std. dev. of log productivity shock 
% F_f      =  exp(X(10));    % foreign match fixed cost
% cs_f     =  exp(X(11));    % cost function scalar, foreign market
% scale_f  =  X(12);         % log of foreign profit function scalar 



try
    
% dbstop if warning    
tic;
X2params;
SetParams;
inten_sim_v1;
time1 = toc;

tic2 = tic;
% discrete_sim_v1;
discrete_sim_parfor3;
time2 = toc(tic2);

fprintf('\r\n inten_sim run time:    %.2f\n', time1); 
fprintf(' discrete_sim run time: %.2f\n', time2);


%% Targets and weights

[Data, W] = target_stats();

%% Realizations


% Model = cat(1,vtran,hazrate,clidist,mstat,mnumex,mavship,mavex,mreg,mexreg,mexshr);

    match_death_coefsSIM = [match_exit_rate;beta_match_exit(2:5)]; % [match exit rate, 1st yr. dummy, lnXf(ijt), ln(match age), ln(exporter age),mse]
    match_ar1_coefsSIM   = [ybar_match;beta_match(2:4);mse_match_ar1]; % [mean ln Xf(ijt), ln Xf(ijt-1), R(ijt-1), ln(exporter age)]   
    loglog_coefsSIM      = [b_degree]; % [intercept, slope, quadratic term]
    mavshipSIM           = [avg_ln_ships]; % average ln(# shipments) 
    exp_dom_coefsSIM     = [ybar_hfsales;beta_hfsales(2);mse_hf]; % [mean dep var.,coef,MSE]  
    dom_ar1_coefsSIM     = [ybar_fsales_h;beta_fsales_h(2);mse_h]; % [mean dep var.,coef,MSE] 
    ln_haz_coefsSIM      = [mean_ln_haz;b_haz(2:6)]; % [mean dep. var, ln(1+a), ln(1+a)^2, ln(1+r), ln(1+r)^2, ln(1+a)*ln(1+r)] 
    last_match_coefsSIM  = [mkt_exit_rate;beta_mkt_exit(2:6)]; % [mean dep. var, ln(1+a), ln(1+a)^2, ln(1+r), ln(1+r)^2, ln(1+a)*ln(1+r)]            
    succ_rate_coefsSIM   = [mean_succ_rate;b_succ_rate(2)]; % [mean succ rate, ln(1+meetings)]
    sr_var_coefsSIM      = [mean_usq_succ;b_usq_succ(2)]; % [mean dep. var, ln(1+meetings)]
    for_sales_shrSIM     = [avg_expt_rate]; % mean share of exports to U.S. in total sales 
    exp_fracSIM          = [share_exptr]; % fraction of firms exporting to U.S.  

 Model = cat(1,match_death_coefsSIM,match_ar1_coefsSIM,loglog_coefsSIM,...
    mavshipSIM,exp_dom_coefsSIM,dom_ar1_coefsSIM,ln_haz_coefsSIM,...   
    last_match_coefsSIM,succ_rate_coefsSIM,sr_var_coefsSIM,for_sales_shrSIM,...    
    exp_fracSIM);   


error = Data'-Model;

% To exclude intercept of log-log regression, allow next block

    Data(11) = 0;
%   Model(11) = 0;
    error(11) = 0;
    

% To exclude avg. log exports from DANE-based X-D regression, allow next block

    Data(15) = 0;
%   Model(15) = 0;
    error(15) = 0;
    
% To exclude variance of DANE-based X-D regression, allow next block

   Data(17) = 0;
%   Model(17) = 0;
   error(17) = 0;
    
% To exclude avg. log domestic sales from DANE-based AR1 regression, allow next block

    Data(18) = 0;
%   Model(15) = 0;
    error(18) = 0;
    
% To exclude market exit regression, allow next block
    
     Data(27:32) = 0;
     Model(27:32) = 0;
     error(27:32) = 0;
    
% To exclude variance of error in domestic AR1, allow next block  
    
  Data(20) = 0;
%   Model(20) = 0;
  error(20) = 0;
%     

W_D   = log((error'/W)*error);
Old_D = norm(error)/norm(Data');

D = W_D;
% To use unweighted metric:
%D = Old_D;

nanflag = isnan(D); 
if nanflag>0
        D = D * 10; 
end

%     punishment
%     D = D*(1+punishment);
    
%     mmm = cat(2,Data',Model)
%     X %print out current parameter guess
%     D

        % Create Diagnostics
    inv_W = W^-1;
    err_comp = @(sta,fin) error(sta:fin)' * inv_W(sta:fin,sta:fin) * error(sta:fin);
    match_death_coefs_err = err_comp(1,5);
    match_ar1_coefs_err   = err_comp(6,10);
    log_log_coefs_err     = err_comp(11,13);
    mavg_ship_coef_err    = err_comp(14,14);
    exp_dom_err           = err_comp(15,17);
    dom_ar1_err           = err_comp(18,20);
    match_lag_coef_err    = err_comp(21,26);
    last_match_coef_err   = err_comp(27,32);
    succ_rate_coef_err    = err_comp(33,34);
    sr_var_coef_err       = err_comp(35,36);
    for_sales_shr_err     = err_comp(37,37);
    exp_frac_err          = err_comp(38,38);
                   
    fprintf('\r\n weighted metric:   %.15f\n', W_D); 
        
    %Simple unweighted loss

    fprintf(' unweighted metric: %.15f\n', Old_D); 
    
   fprintf('\r\n params = ');
   fprintf('\r%8.5f %8.5f %8.5f %8.5f %8.5f %8.5f',X(1:6));
   fprintf('\r%8.5f %8.5f %8.5f %8.5f %8.5f %8.5f',X(7:12));
   fprintf( '\r\n  ');   
    
        
%%  data/model comparison  
    mmm = cat(2,Data',Model);  
    
    max_clients = size(ff_sim_max,1);
    nfirm_per_yr = agg_nfirm/(mm.tot_yrs - mm.burn);
    nexpr_per_yr = agg_nexptr/(mm.tot_yrs - mm.burn);
    
    format shortG
    fprintf('\r\n moments: ');
    cat(2,mmm(1:10,:),mmm(11:20,:),mmm(21:30,:),[mmm(31:38,:);zeros(2,2)])
    format long
    
%     fprintf('\r\n moments: ');   
%     fprintf('\r\n%6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f',full(mmm(1:10,:)));  
%     fprintf('\r\n  ');
%     fprintf('\r\n%6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f',full(mmm(11:20,:)));  
%     fprintf('\r\n  ');
%     fprintf('\r\n%6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f',full(mmm(21:30,:)));  
%     fprintf('\r\n  ');
%     fprintf('\r\n%6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f',full(mmm(31:38,:)));  
%     fprintf( '\r\n  ');   

  
    fprintf('\r\n Fit diagnostics: ');  
    fprintf('\r\n match_death_coefs  = %.3f\n',match_death_coefs_err);
    fprintf(' match_ar1_coefs    = %.3f\n',match_ar1_coefs_err);
    fprintf(' log_log_coefs      = %.3f\n',log_log_coefs_err);
    fprintf(' av_shipments       = %.3f\n',mavg_ship_coef_err);
    fprintf(' exp_dom            = %.3f\n',exp_dom_err);
    fprintf(' dom_ar1            = %.3f\n',dom_ar1_err);
    fprintf(' match_lag_coef     = %.3f\n',match_lag_coef_err);
    fprintf(' last_match_coef    = %.3f\n',last_match_coef_err);   
    fprintf(' succ_rate_coef     = %.3f\n',succ_rate_coef_err);
    fprintf(' sr_var_coef        = %.3f\n',sr_var_coef_err);
    fprintf(' for_sales_shr_coef = %.3f\n',for_sales_shr_err);
    fprintf(' exp_frac_coef      = %.3f\n',exp_frac_err);
    
    fprintf('\r\n number of exporters per yr = %.3f\n',nexpr_per_yr);
    fprintf(' maximum number of clients  = %.3f\n',max_clients);
    fprintf(' number of firms per yr     = %.3f\n',nfirm_per_yr);
    fprintf( '\r\n  '); 
    
%%   write results to text files
      fitvec = [W_D Old_D];
      fileID2 = fopen('results/ga_fitlog.txt','a');
      fprintf(fileID2,'\r\n fit metric = ');
      dlmwrite('results/ga_fitlog.txt',fitvec,'-append','precision',12);
      fclose(fileID2);
 

      fileID1 = fopen('results/ga_running_output.txt','a');
      fprintf(fileID1,'\r\n fit metrics (weighted and unweighted): ');
      dlmwrite('results/ga_running_output.txt',fitvec,'-append','precision',12);
    
      fprintf(fileID1, '\r\n parameters: ');
      fprintf(fileID1, '\r\n%9.5f %9.5f %9.5f %9.5f %9.5f %9.5f',X(1:6));
      fprintf(fileID1, '\r\n%9.5f %9.5f %9.5f %9.5f %9.5f %9.5f',X(7:12));
      fprintf(fileID1, '\r\n  ');
  
      fprintf(fileID1, '\r\n moments: ');   
      fprintf(fileID1, '\r\n%6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f',full(mmm(1:10,:)));  
      fprintf(fileID1, '\r\n  ');
      fprintf(fileID1, '\r\n%6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f',full(mmm(11:20,:)));  
      fprintf(fileID1, '\r\n  ');
      fprintf(fileID1, '\r\n%6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f',full(mmm(21:30,:)));  
      fprintf(fileID1, '\r\n  ');
      fprintf(fileID1, '\r\n%6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f',full(mmm(31:38,:)));  
      fprintf(fileID1, '\r\n  ');               
      fclose(fileID1);
%%    
plots
summary_tables_v2 
estimate_summary
 
sortmat = sortrows(agg_mat_yr_sales,[2 3 1]); 
sortmat(:,1) = floor(sortmat(:,1)./mm.pd_per_yr);
% agg_mat_yr_sales: [t,type,firm ID, match sales, shipments, boy Z, eoy Z, w/in yr. match age, firm age] 

shouldMatchMoments(mmm,W_D,"test");

catch err
        % report error
%         getReport(err, 'extended')
%         load('badX','XX')
%         XX = [XX;X];
%         save('badX','XX')
%         % If broken for any reason, return high loss
        D = 1e12;
        W = 1; 
        error = 1;
end %end try/catch
   
end
